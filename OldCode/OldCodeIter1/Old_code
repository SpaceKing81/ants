mod Ants_code {
    // / Elements of the biots' genomes:
    // / a for attack
    // / d for defence
    // / p for photosynthesis
    // / m for motion
    // / i for intelligence
    // n does nothing
    // const LETTERS : &[char] = &['a','d','p','m', 'n', 'n', 'n', 'i'];

    // modulo  operator to get toroidal world topology

    // A single ant
    #[derive(Clone, Debug)]
    pub struct WorkerAnt {
        // Status
        life: f32,
        pub pos: Vec2,
        speed: Vec2,
        age: u32,
        pub dead: bool, // Genome
                        // genome: [char; 13],
                        // pub attack: f32,
                        // pub defense: f32,
                        // pub photosynthesis: f32,
                        // pub motion: f32,
                        // pub intelligence: f32,
    }

    impl WorkerAnt {
        /// Create a worker ant
        pub fn worker_ant(pos: Vec2) -> Self {
            // let mut genome = ['u';13];
            // for letter in genome.iter_mut() {
            //     *letter = LETTERS[rand::gen_range(0, LETTERS.len() as u32) as usize];
            // }
            let mut s = Self {
                life: 0.,
                pos,
                speed: vec2(2., 2.),
                age: 0,
                dead: false,
                // genome,
                // attack: 0.,
                // defense: 0.,
                // photosynthesis: 0.,
                // motion: 0.,
                // intelligence: 0.,
            };
            // s.set_from_genome();
            s.life = s.base_life();
            s
        }
        // Compute the evolution of the biot for one simulation step
        pub fn step(
            &mut self,
            rtree: &RTree<TreePoint>,
            feed_dir: Option<Vec2>,
        ) -> Option<WorkerAnt> {
            let mut offspring = None;

            // put in colony purview, reproduction if life is big enough

            // if close_by.map_or(true, |(_,d2)|d2>200.) {
            //     let mut off = self.clone();
            //     off.age = 0;
            //     // while rand::gen_range(0., 1.) < 0.2 {
            //     //     off.mutate();
            //     // }
            //     off.life = off.base_life();
            //     off.random_move(1.5);
            //     offspring = Some(off);
            //     self.life = (adult_factor-1.)* self.base_life();
            // }

            self.pos += self.speed;
            self.pos.x = modulo(self.pos.x, screen_width());
            self.pos.y = modulo(self.pos.y, screen_height());
            self.speed *= 0.9;
            // self.life += (self.photosynthesis - self.metabolism())*0.4;
            // if rand::gen_range(0., 1.) < 0.2*self.motion {
            let speed = 5.;
            // if self.intelligence > 0. {
            // if let Some(feed_dir) = feed_dir {
            // self.accelerate(feed_dir, speed);
            // } else {
            // self.random_move(speed)
            // }
            // } else {
            self.random_move(speed);
            // }
            // }

            self.age += 1;
            offspring
        }
        // Fight between two ants
        // pub fn interact(worker_ants: &mut Vec<Self>, i:usize, j:usize) {
        //     let dist = (worker_ants[i].pos - worker_ants[j].pos).length();
        //     if dist < 10.* (worker_ants[i].weight() + worker_ants[j].weight()) {
        //         if worker_ants[i].stronger(&worker_ants[j]) {
        //             worker_ants[i].life += worker_ants[j].life * 0.8;
        //             worker_ants[j].life = 0.;
        //         }
        //         else if worker_ants[j].stronger(&worker_ants[i]) {
        //             worker_ants[j].life += worker_ants[i].life * 0.8;
        //             worker_ants[i].life = 0.;
        //         }
        //     }
        // }
        pub fn dead(&self) -> bool {
            //needs to be dead(&mut self) for it to be able to edit the dead property
            if self.life <= 0. || self.age >= 1000 {
                return true;
            }
            false
        }
        // Are we stronger than this other biot?
        // pub fn stronger(&self, other: &Self) -> bool {
        //     self.attack > other.attack + other.defense * 0.9
        // }
        // Compute chacteristics from biot genome
        // fn set_from_genome(&mut self) {
        //     self.attack= self.genome.iter().filter(|&&c|c=='a').count() as f32 * 0.1;
        //     self.defense= self.genome.iter().filter(|&&c|c=='d').count() as f32 * 0.1;
        //     self.photosynthesis= self.genome.iter().filter(|&&c|c=='p').count() as f32 * 0.1;
        //     self.motion= self.genome.iter().filter(|&&c|c=='m').count() as f32 * 0.1;
        //     self.intelligence= self.genome.iter().filter(|&&c|c=='i').count() as f32 * 10.;
        // }
        // Move in a random direction
        fn random_move(&mut self, speed: f32) {
            self.accelerate(
                vec2(rand::gen_range(0., 1.) - 0.5, rand::gen_range(0., 1.) - 0.5).normalize(),
                speed,
            );
        }
        /// Apply acceleration in a certain direction
        fn accelerate(&mut self, dir: Vec2, speed: f32) {
            self.speed += dir * speed;
        }
        // Randomly mutate a single base
        // fn mutate(&mut self) {
        //     self.genome[rand::gen_range(0, self.genome.len() as u32) as usize] = LETTERS[rand::gen_range(0, LETTERS.len() as u32) as usize];
        //     self.set_from_genome();
        // }
        // Original life points of a biot. Also used to determine when the biot will spawn
        fn base_life(&self) -> f32 {
            10.
        }
        // Metabolic cost of various traits. These parameters are aboslutely critical to the
        // simulation
        // fn metabolism(&self) -> f32 {
        //     0.2*(4.5*self.attack + 2.3*self.defense + 2.5*self.motion + 0.1*self.intelligence)
        // }

        // fn weight(&self) -> f32 {
        //     self.attack + self.defense + self.photosynthesis + self.motion
        // }
    }

    /// Helper structure used for the rstar geometric data structure. This data structure is used for
    /// computing interaction between biots fluidly even with thousands of them
    pub struct TreePoint {
        pub x: f64,
        pub y: f64,
        pub idx: usize,
    }

    impl RTreeThings for TreePoint {
        type Envelope = AABB<[f64; 2]>;
        fn envelope(&self) -> Self::Envelope {
            AABB::from_point([self.x, self.y])
        }
    }

    impl PointDistance for TreePoint {
        fn distance_2(&self, point: &<<Self as rstar::RTreeThings>::Envelope as rstar::Envelope>::Point) -> <<<Self as rstar::RTreeThings>::Envelope as rstar::Envelope>::Point as rstar::Point>::Scalar
{
            (self.x - point[0]) * (self.x - point[0]) + (self.y - point[1]) * (self.y - point[1])
        }
    }

    pub struct Colony {
        life: f32,
        food_level: f32,
        pub pos: Vec2,
    }
    impl Colony {
        pub fn colony(posx: f32, posy: f32) -> Self {
            let q = Colony {
                life: 10.,
                food_level: 10.,
                pos: vec2(posx, posy),
            };
            q
        }

        pub fn update_food_values(mut self, AntCollection: WorkerAntCollection) {
            if self.food_level <= 0. {
                //relese pheromones
                self.life -= 0.01;
            } else if self.food_level > 0. || self.food_level < 15. {
                if self.life < 10. {
                    while self.food_level > 0.06 && self.life < 10. {
                        self.food_level -= 0.01;
                        self.life += 0.01;
                    }
                    if self.life > 10. {
                        self.life = 10.;
                    }
                }
                if self.food_level > 6. {
                    self.food_level -= 0.5;
                }
            }
        }
    }

    pub struct Food {
        pub pos: Vec2,
        pub size: f32,
        pub exist: bool,
    }

    impl Food {
        pub fn food(pos: Vec2) -> Self {
            let f = Self {
                pos,
                size: 2.,
                exist: true,
            };
            f
        }
        pub fn aggergate(food: &mut Vec<Self>, i: usize, j: usize) {
            let distx = food[i].pos.x - food[j].pos.x;
            let disty = food[i].pos.y - food[j].pos.y;
            let distr = (((disty * disty) + (distx + distx)).sqrt()) - food[i].size - food[j].size;

            if (distr) < 10. {
                if food[i].size > food[j].size {
                    food[i].pos.x += distx * food[j].size / food[i].size;
                    food[i].pos.y += disty * food[j].size / food[i].size;
                    food[i].size += food[j].size;
                    food[j].exist = false;
                } else if food[j].size > food[i].size {
                    food[j].pos.x += distx * food[i].size / food[j].size;
                    food[j].pos.y += disty * food[i].size / food[j].size;
                    food[j].size += food[i].size;
                    food[i].exist = false;
                } else {
                    food[j].pos.x += distx * 0.5;
                    food[j].pos.y += disty * 0.5;
                    food[j].size += food[i].size;
                    food[i].exist = false;
                }
            }
        }
    }
}


mod Collection_code {

  use rstar::RTree;
  use std::collections::HashSet;
  /// A collection of worker ants. Responsible for handling interactions between biots
  pub struct WorkerAntCollection {
      worker_ants: Vec<WorkerAnt>,
  }
  impl WorkerAntCollection {
      /// Create n worker ants
      pub fn new(n: usize, colony: ColonyImplimintation) -> Self {
          let mut s = Self {
              worker_ants: Vec::new(),
          };
          for _ in 0..n {
              s.worker_ants.push(WorkerAnt::worker_ant(vec2(
                  colony.colony.pos.x,
                  colony.colony.pos.y,
              )));
          }
          s
      }
      /// Compute one step of the simulation.
      pub fn step(&mut self, mut new: Vec<WorkerAnt>) {
          // let mut new: Vec<WorkerAnt> = Vec::new();
          // let mut dead: Vec<Food> = Vec::new();
          // R-star datastructure used for quickly locating neighbors
          let tree: RTree<TreePoint> = RTree::bulk_load(
              self.worker_ants
                  .iter()
                  .enumerate()
                  .map(|(n, ant)| TreePoint {
                      x: ant.pos.x as f64,
                      y: ant.pos.y as f64,
                      idx: n,
                  })
                  .collect(),
          );
          // Move and reproduce worker_ants
          for n in 0..(self.worker_ants.len()) {
              // let mut feed_dir : Option<Vec2> = None;
  
              // if self.worker_ants[n].intelligence > 0. {
              //     for (other, d2) in tree.nearest_neighbor_iter_with_distance_2(&[self.worker_ants[n].pos.x as f64, self.worker_ants[n].pos.y as f64]) {
              //         if other.idx == n {
              //             // Filter the biot itself out of the query.
              //             continue;
              //         }
              //         if d2 as f32 > (self.worker_ants[n].intelligence*self.worker_ants[n].intelligence)*1600. {
              //             break;
              //         }
              //         if self.worker_ants[n].stronger(&self.worker_ants[other.idx]) {
              //             feed_dir = Some(vec2(other.x as f32 -self.worker_ants[n].pos.x, other.y as f32 -self.worker_ants[n].pos.y).normalize());
              //             break;
              //         }
              //     }
              // }
              let off = self.worker_ants[n].step(&tree, None);
              if let Some(offspring) = off {
                  new.push(offspring);
              }
  
              // work in progress, intend to convert dead ants to food
  
              // self.worker_ants[n].dead();
              // if self.worker_ants[n].dead == true {
              //     dead.push(self.worker_ants[n].turn_dead());
  
              // }
          }
          // Compute biot interactions
          // let mut visited : HashSet<usize> = HashSet::new();
          // for f in tree.iter() {
          //     visited.insert(f.idx);
  
          // makes the ants check for eachother, change so they check for pheromones instead, and act instead of fight
          //     for s in tree.locate_within_distance([f.x, f.y], 50.) //FIXME 30 is hardcoded
          //     {
          //         if ! visited.contains(&s.idx) { // Don't do it twice
          // WorkerAnt::interact(&mut self.worker_ants, f.idx, s.idx);
          //         }
          //     }
          // }
          // Remove dead worker_ants and add the new ones to the collection
  
          self.worker_ants.retain(|b| !b.dead());
          self.worker_ants.append(&mut new);
      }
      /// Display the biot collection
      pub fn draw_ant(&self) {
          for worker_ant in self.worker_ants.iter() {
              draw_circle(worker_ant.pos.x, worker_ant.pos.y, 3., RED);
          }
      }
      /// The number of biots currently in our collection
      pub fn len(&self) -> usize {
          self.worker_ants.len()
      }
  }
  pub struct ColonyImplimintation {
      colony: Colony,
  }
  impl ColonyImplimintation {
      pub fn new(posx: f32, posy: f32) -> ColonyImplimintation {
          let q = Self {
              colony: Colony::colony(posx, posy),
          };
          q
      }
  
      pub fn draw_colony(&self) {
          let posx = &self.colony.pos.x;
          let posy = &self.colony.pos.y;
          draw_circle(*posx, *posy, 10., BROWN);
      }
  
      pub fn step(&self, ) {
  
      }
  }
  pub struct FoodCollection {
      food: Vec<Food>,
  }
  impl FoodCollection {
      pub fn new(n: usize) -> Self {
          let mut f = Self { food: Vec::new() };
          for _ in 0..n {
              f.food.push(Food::food(vec2(
                  rand::gen_range(0., 1.) * screen_width(),
                  rand::gen_range(0., 1.) * screen_height(),
              )));
          }
          f
      }
  
      pub fn step(&mut self, mut new: Vec<Food>) {
          // let mut new: Vec<Food> = Vec::new();
          // R-star datastructure used for quickly locating neighbors
          let tree: RTree<TreePoint> = RTree::bulk_load(
              self.food
                  .iter()
                  .enumerate()
                  .map(|(n, piece)| TreePoint {
                      x: piece.pos.x as f64,
                      y: piece.pos.y as f64,
                      idx: n,
                  })
                  .collect(),
          );
  
          let mut visited: HashSet<usize> = HashSet::new();
          for f in tree.iter() {
              visited.insert(f.idx);
  
              for s in tree.locate_within_distance([f.x, f.y], 50.)
              //FIXME 30 is hardcoded
              {
                  if !visited.contains(&s.idx) {
                      // Don't do it twice
                      Food::aggergate(&mut self.food, f.idx, s.idx);
                  }
              }
          }
  
          FoodCollection::new(1);
  
          self.food.append(&mut new);
          self.food.retain(|b| b.exist);
  
          let mut new: Vec<Food> = Vec::new();
          // R-star datastructure used for quickly locating neighbors
          let tree: RTree<TreePoint> = RTree::bulk_load(
              self.food
                  .iter()
                  .enumerate()
                  .map(|(n, piece)| TreePoint {
                      x: piece.pos.x as f64,
                      y: piece.pos.y as f64,
                      idx: n,
                  })
                  .collect(),
          );
  
          let mut visited: HashSet<usize> = HashSet::new();
          for f in tree.iter() {
              visited.insert(f.idx);
  
              for s in tree.locate_within_distance([f.x, f.y], 50.)
              //FIXME 30 is hardcoded
              {
                  if !visited.contains(&s.idx) {
                      // Don't do it twice
                      Food::aggergate(&mut self.food, f.idx, s.idx);
                  }
              }
          }
  
          FoodCollection::new(1);
  
          self.food.append(&mut new);
          self.food.retain(|b| b.exist);
      }
  
      pub fn draw_piece(&self) {
          for food in self.food.iter() {
              draw_circle(food.pos.x, food.pos.y, food.size, ORANGE);
          }
      }
      pub fn len(&self) -> usize {
          self.food.len()
      }
  }
  fn trueStep(ant_collection: Vec<WorkerAnt>, food_collection: Vec<Food>, colony_collection: Vec<WorkerAnt>, startingAnts: u16, startingFood: u16, ) {
      let colony = ColonyImplimintation::new(screen_width()/2., screen_height()/2.);
      let mut ants = WorkerAntCollection::new(startingAnts, colony);
      let mut pieces = FoodCollection::new(startingFood);
      let colony = ColonyImplimintation::new(screen_width()/2., screen_height()/2.);
      let mut time:u128 = 0;
      ants.step(ant_collection);
      colony.step();
      pieces.step(food_collection); 
  
  }
  }
  